FROM centos:7

# IMRS-Platform -DAP
# Test environment
# Runs Python 2 and Python 3 using virtualenv.

# Var
ENV PYTHON_2_VERSION 2.7.16
ENV PYTHON_3_VERSION 3.7.3

ARG user=jenkins
ARG group=jenkins
ARG uid=1000
ARG gid=1000
ARG USER_HOME_DIR=/home/${user}

ENV JENKINS_AGENT_HOME ${USER_HOME_DIR}

RUN groupadd -g ${gid} ${group}
RUN useradd -d "${JENKINS_AGENT_HOME}" -u "${uid}" -g "${gid}" -m -s /bin/bash "${user}"

# Updating Container
RUN yum -y update

# Installing tools to compile Python
RUN yum groupinstall -y "development tools"
RUN yum install -y zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel
RUN yum install -y db4-devel libpcap-devel xz-devel expat-devel libffi-devel gcc
RUN yum install -y wget which

### Installing some common OS Pre-requirements

# Mysql Package
RUN yum install -y mysql-devel mysql-lib libcurl-devel deltarpm

# Curl Package
ENV PYCURL_SSL_LIBRARY nss


# cx-Oracle Dependencies
# https://github.com/oracle/docker-images/blob/master/OracleInstantClient/dockerfiles/18.3.0/Dockerfile#L24
# http://sikkyappsdba.blogspot.com/2018/08/couldnt-open-file-etcpkirpm-gpgrpm-gpg.html
RUN wget http://public-yum.oracle.com/RPM-GPG-KEY-oracle-ol7 -O /etc/pki/rpm-gpg/RPM-GPG-KEY-oracle

RUN  curl -o /etc/yum.repos.d/public-yum-ol7.repo https://yum.oracle.com/public-yum-ol7.repo && \
     yum-config-manager --enable ol7_oracle_instantclient && \
     yum -y install oracle-instantclient18.3-basic oracle-instantclient18.3-devel oracle-instantclient18.3-sqlplus --nogpgcheck && \
     rm -rf /var/cache/yum && \
     echo /usr/lib/oracle/18.3/client64/lib > /etc/ld.so.conf.d/oracle-instantclient18.3.conf && \
     ldconfig

# SAML Library Dependencies
RUN yum install xmlsec1 libxml2 xmlsec1-dev libxml2-dev libxslt-devel libxml2-devel xmlsec1-devel xmlsec1-openssl-devel libtool-ltdl-devel -y


# Installing Python 2

RUN cd /usr/src && \
    wget -O python.tar.tgz "https://www.python.org/ftp/python/${PYTHON_2_VERSION%%[a-z]*}/Python-${PYTHON_2_VERSION}.tgz" && \
	tar xzf python.tar.tgz && \
	cd Python-${PYTHON_2_VERSION} && \
	./configure --enable-optimizations && \
	make install

# Update Pip for Python 2
RUN cd /usr/src && \
	wget https://bootstrap.pypa.io/get-pip.py -O get-pip.py --no-check-certificate && \
    python get-pip.py --trusted-host pypi.python.org --trusted-host pypi.org --trusted-host files.pythonhosted.org

# Installing Python 3
RUN cd /usr/src && \
    wget -O python.tar.tgz "https://www.python.org/ftp/python/${PYTHON_3_VERSION%%[a-z]*}/Python-${PYTHON_3_VERSION}.tgz" && \
	tar xzf python.tar.tgz && \
	cd Python-${PYTHON_3_VERSION} && \
	./configure --enable-optimizations && \
	make install

# Update Pip for Python 3
RUN cd /usr/src && \
	wget https://bootstrap.pypa.io/get-pip.py -O get-pip.py --no-check-certificate && \
    python3 get-pip.py --trusted-host pypi.python.org --trusted-host pypi.org --trusted-host files.pythonhosted.org


# Installing Virtualenv Since can be a shared container
RUN pip install virtualenv --trusted-host pypi.python.org --trusted-host pypi.org --trusted-host files.pythonhosted.org
# Installing Virtualenv Since can be a shared container
RUN python3 -m pip install virtualenv --trusted-host pypi.python.org --trusted-host pypi.org --trusted-host files.pythonhosted.org

COPY custom_files /custom_files
RUN chmod +x /custom_files/*
ENV PATH="/custom_files/:${PATH}"

COPY requirements.dev.txt requirements.txt
RUN python3 -m pip install -r requirements.txt
